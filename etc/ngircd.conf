#
# This is a sample configuration file for the ngIRCd IRC daemon, which must
# be customized to the local preferences and needs.
#
# Comments are started with "#" or ";".
#
# A lot of configuration options in this file start with a ";". You have
# to remove the ";" in front of each variable to actually set a value!
# The disabled variables are shown with example values for completeness only
# and the daemon is using compiled-in default settings.
#
# Use "ngircd --configtest" (see manual page ngircd(8)) to validate that the
# server interprets the configuration file as expected!
#
# Please see ngircd.conf(5) for a complete list of configuration options.
#

[Global]
	# The [Global] section of this file is used to define the main
	# configuration of the server, like the server name and the ports
	# on which the server should be listening.

	# Server name in the IRC network, must contain at least one dot
	# (".") and be unique in the IRC network. Required!
	Name = bb.isasaka.net

	# Info text of the server. This will be shown by WHOIS and
	# LINKS requests for example.
	Info = Server Info Text

	# Global password for all users needed to connect to the server
	;Password = abc
	Password = guestdegues

	# Information about the server and the administrator, used by the
	# ADMIN command. Not required by server but by RFC!
	;AdminInfo1 = Description
	;AdminInfo2 = Location
	;AdminEMail = admin@irc.server
 
	# Ports on which the server should listen. There may be more than
	# one port, separated with ",". (Default: 6667)
	;Ports = 6667, 6668, 6669

	# Additional Listen Ports that expect SSL/TLS encrypted connections
	;SSLPorts = 9999,6668

	# SSL Server Key
        ;SSLKeyFile = /usr/local/etc/ngircd/ssl/server-key.pem

	# password to decrypt SSLKeyFile (OpenSSL only)
	;SSLKeyFilePassword = secret

	# SSL Server Key Certificate
	;SSLCertFile = /usr/local/etc/ngircd/ssl/server-cert.pem

	# Diffie-Hellman parameters
	;SSLDHFile = /usr/local/etc/ngircd/ssl/dhparams.pem

	# comma separated list of IP addresses on which the server should
	# listen. Default values are:
	# "0.0.0.0" or (if compiled with IPv6 support) "::,0.0.0.0"
	# so the server listens on all IP addresses of the system by default.
	;Listen = 127.0.0.1,192.168.0.1

	# Text file with the "message of the day" (MOTD). This message will
	# be shown to all users connecting to the server:
	;MotdFile = /usr/local/etc/ngircd.motd

	# A simple Phrase (<256 chars) if you don't want to use a motd file.
	# If it is set no MotdFile will be read at all.
	;MotdPhrase = "Hello world!"

	# User ID under which the server should run; you can use the name
	# of the user or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges! In addition,
	# the configuration and MOTD files must be readable by this user,
	# otherwise RESTART and REHASH won't work!
	;ServerUID = 65534
        ServerUID = 66

	# Group ID under which the ngircd should run; you can use the name
	# of the group or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges!
	;ServerGID = 65534
	ServerGID = 66

	# A directory to chroot in when everything is initialized. It
	# doesn't need to be populated if ngIRCd is compiled as a static
	# binary. By default ngIRCd won't use the chroot() feature.
	# ATTENTION: For this to work the server must have been started
	# with root privileges!
	;ChrootDir = /var/empty

	# This tells ngircd to write its current process id to a file.
	# Note that the pidfile is written AFTER chroot and switching uid,
	# i. e. the Directory the pidfile resides in must be writeable by
	# the ngircd user and exist in the chroot directory.
	;PidFile = /var/run/ngircd/ngircd.pid

	# After <PingTimeout> seconds of inactivity the server will send a
	# PING to the peer to test whether it is alive or not.
	;PingTimeout = 120

	# If a client fails to answer a PING with a PONG within <PongTimeout>
	# seconds, it will be disconnected by the server.
	;PongTimeout = 20

	# The server tries every <ConnectRetry> seconds to establish a link
	# to not yet (or no longer) connected servers.
	;ConnectRetry = 60

	# Should IRC Operators be allowed to use the MODE command even if
	# they are not(!) channel-operators?
	;OperCanUseMode = no

	# Mask IRC Operator mode requests as if they were coming from the
	# server? (This is a compatibility hack for ircd-irc2 servers)
	;OperServerMode = no

	# Are remote IRC operators allowed to control this server, e. g.
	# use commands like CONNECT, SQUIT, DIE, ...?
	;AllowRemoteOper = no

	# Allow Pre-Defined Channels only (see Section [Channels])
	;PredefChannelsOnly = no

	# Don't do any DNS lookups when a client connects to the server.
	;NoDNS = no

	# Don't do any IDENT lookups, even if ngIRCd has been compiled
	# with support for it.
	;NoIdent = no

	# try to connect to other irc servers using ipv4 and ipv6, if possible
	;ConnectIPv6 = yes
	;ConnectIPv4 = yes

	# Maximum number of simultaneous in- and outbound connections the
	# server is allowed to accept (0: unlimited):
	MaxConnections = 0

	# Maximum number of simultaneous connections from a single IP address
	# the server will accept (0: unlimited):
	MaxConnectionsIP = 0

	# Maximum number of channels a user can be member of (0: no limit):
	MaxJoins = 0

	# Maximum length of an user nick name (Default: 9, as in RFC 2812).
	# Please note that all servers in an IRC network MUST use the same
	# maximum nick name length!
	MaxNickLength = 20

[Operator]
	# [Operator] sections are used to define IRC Operators. There may be
	# more than one [Operator] block, one for each local operator.

	# ID of the operator (may be different of the nick name)
	;Name = TheOper

	# Password of the IRC operator
	;Password = ThePwd

	# Optional Mask from which /OPER will be accepted
	;Mask = *!ident@somewhere.example.com

[Operator]
	# More [Operator] sections, if you like ...

[Server]
	# Other servers are configured in [Server] sections. If you
	# configure a port for the connection, then this ngircd tries to
	# connect to to the other server on the given port; if not it waits
	# for the other server to connect.
	# There may be more than one server block, one for each server.
	#
	# Server Groups:
	# The ngIRCd allows "server groups": You can assign an "ID" to every
	# server with which you want this ngIRCd to link. If a server of a
	# group won't answer, the ngIRCd tries to connect to the next server
	# in the given group. But the ngircd never tries to connect to two
	# servers with the same group ID.

	# IRC name of the remote server, must match the "Name" variable in
	# the [Global] section of the other server (when using ngIRCd).
	;Name = irc2.the.net

	# Internet host name or IP address of the peer (only required when
	# this server should establish the connection).
	;Host = connect-to-host.the.net

	# IP address to use as _source_ address for the connection. if
	# unspecified, ngircd will let the operating system pick an address.
	;Bind = 10.0.0.1

	# Port of the server to which the ngIRCd should connect. If you
	# assign no port the ngIRCd waits for incoming connections.
	;Port = 6667

	# Own password for the connection. This password has to be configured
	# as "PeerPassword" on the other server.
	;MyPassword = MySecret

	# Foreign password for this connection. This password has to be
	# configured as "MyPassword" on the other server.
	;PeerPassword = PeerSecret

	# Group of this server (optional)
	;Group = 123

	# Set the "Passive" option to "yes" if you don't want this ngIRCd to
	# connect to the configured peer (same as leaving the "Port" variable
	# empty). The advantage of this option is that you can actually
	# configure a port an use the IRC command CONNECT more easily to
	# manually connect this specific server later.
	;Passive = no

	# Connect to the remote server using TLS/SSL (Default: false)
	;SSLConnect = yes

	# Define a (case insensitive) mask matching nick names that should be
	# treated as IRC services when introduced via this remote server.
	# REGULAR SERVERS DON'T NEED this parameter, so leave it empty
	# (which is the default).
	# When you are connecting IRC services which mask as a IRC server
	# and which use "virtual users" to communicate with, for example
	# "NickServ" and "ChanServ", you should set this parameter to
	# something like "*Serv".
	;ServiceMask = *Serv

[Server]
	# More [Server] sections, if you like ...

[Channel]
	# Pre-defined channels can be configured in [Channel] sections.
	# Such channels are created by the server when starting up and even
	# persist when there are no more members left.
	# Persistent channels are marked with the mode 'P', which can be set
	# and unset by IRC operators like other modes on the fly.
	# There may be more than one [Channel] block, one for each channel.

	# Name of the channel
	;Name = #TheName

	# Topic for this channel
	;Topic = a great topic

	# Initial channel modes
	;Modes = tnk

	# initial channel password (mode k)
	;Key = Secret

	# Key file, syntax for each line: "<user>:<nick>:<key>".
	# Default: none.
	;KeyFile = /etc/ngircd/#chan.key

	# maximum users per channel (mode l)
	;MaxUsers = 23
	MaxUsers = 100

[Channel]
	# More [Channel] sections, if you like ...

# -eof-
