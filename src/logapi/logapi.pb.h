// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_logapi_2eproto__INCLUDED
#define PROTOBUF_logapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>

namespace logapi {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logapi_2eproto();
void protobuf_AssignDesc_logapi_2eproto();
void protobuf_ShutdownFile_logapi_2eproto();

class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  
  // required string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  
  // required string identifier = 3;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 3;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  
  // required string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* channel_;
  static const ::std::string _default_channel_;
  ::std::string* time_;
  static const ::std::string _default_time_;
  ::std::string* identifier_;
  static const ::std::string _default_identifier_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_logapi_2eproto();
  friend void protobuf_AssignDesc_logapi_2eproto();
  friend void protobuf_ShutdownFile_logapi_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint64 result() const;
  inline void set_result(::google::protobuf::uint64 value);
  
  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 result_;
  ::std::string* error_;
  static const ::std::string _default_error_;
  friend void  protobuf_AddDesc_logapi_2eproto();
  friend void protobuf_AssignDesc_logapi_2eproto();
  friend void protobuf_ShutdownFile_logapi_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================

class RpcService_Stub;

class RpcService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RpcService() {};
 public:
  virtual ~RpcService();
  
  typedef RpcService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void RpcFunc(::google::protobuf::RpcController* controller,
                       const ::logapi::Request* request,
                       ::logapi::Response* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService);
};

class RpcService_Stub : public RpcService {
 public:
  RpcService_Stub(::google::protobuf::RpcChannel* channel);
  RpcService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RpcService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements RpcService ------------------------------------------
  
  void RpcFunc(::google::protobuf::RpcController* controller,
                       const ::logapi::Request* request,
                       ::logapi::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService_Stub);
};


// ===================================================================


// ===================================================================

// Request

// required string channel = 1;
inline bool Request::has_channel() const {
  return _has_bit(0);
}
inline void Request::clear_channel() {
  if (channel_ != &_default_channel_) {
    channel_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Request::channel() const {
  return *channel_;
}
inline void Request::set_channel(const ::std::string& value) {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void Request::set_channel(const char* value) {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void Request::set_channel(const char* value, size_t size) {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_channel() {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  return channel_;
}

// required string time = 2;
inline bool Request::has_time() const {
  return _has_bit(1);
}
inline void Request::clear_time() {
  if (time_ != &_default_time_) {
    time_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Request::time() const {
  return *time_;
}
inline void Request::set_time(const ::std::string& value) {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Request::set_time(const char* value) {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Request::set_time(const char* value, size_t size) {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_time() {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  return time_;
}

// required string identifier = 3;
inline bool Request::has_identifier() const {
  return _has_bit(2);
}
inline void Request::clear_identifier() {
  if (identifier_ != &_default_identifier_) {
    identifier_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Request::identifier() const {
  return *identifier_;
}
inline void Request::set_identifier(const ::std::string& value) {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Request::set_identifier(const char* value) {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Request::set_identifier(const char* value, size_t size) {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_identifier() {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}

// required string message = 4;
inline bool Request::has_message() const {
  return _has_bit(3);
}
inline void Request::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Request::message() const {
  return *message_;
}
inline void Request::set_message(const ::std::string& value) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Request::set_message(const char* value) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Request::set_message(const char* value, size_t size) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_message() {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// Response

// required uint64 result = 1;
inline bool Response::has_result() const {
  return _has_bit(0);
}
inline void Response::clear_result() {
  result_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Response::result() const {
  return result_;
}
inline void Response::set_result(::google::protobuf::uint64 value) {
  _set_bit(0);
  result_ = value;
}

// optional string error = 2;
inline bool Response::has_error() const {
  return _has_bit(1);
}
inline void Response::clear_error() {
  if (error_ != &_default_error_) {
    error_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Response::error() const {
  return *error_;
}
inline void Response::set_error(const ::std::string& value) {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void Response::set_error(const char* value) {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void Response::set_error(const char* value, size_t size) {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_error() {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  return error_;
}


}  // namespace logapi

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_logapi_2eproto__INCLUDED
