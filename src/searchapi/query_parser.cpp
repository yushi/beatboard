
#line 1 "query_parser.rl"
#include "query_parser.h"


#line 64 "query_parser.rl"



#line 11 "query_parser.cpp"
static const char _bbquery_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 2, 0, 1, 2, 1, 
	0, 2, 1, 5, 2, 5, 0, 2, 
	5, 1, 3, 1, 5, 0, 3, 5, 
	1, 0
};

static const short _bbquery_parser_key_offsets[] = {
	0, 0, 12, 20, 28, 38, 47, 56, 
	65, 73, 74, 76, 77, 80, 89, 98, 
	107, 116, 125, 133, 135, 141, 149, 157, 
	167, 176, 185, 194, 202, 211, 220, 229, 
	238, 247, 255, 264, 273, 282, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 309, 
	318, 327, 336, 345, 353, 355, 360, 365, 
	370, 373, 382, 391, 400, 409, 417, 419, 
	420, 421, 424, 425, 434, 443, 452, 460, 
	469, 478, 487, 496, 504, 513, 522, 531, 
	540, 548, 558, 567, 576, 585, 593, 602, 
	611, 620, 629, 638, 646, 655, 664, 673, 
	681, 690, 699, 708, 717, 725, 734, 743, 
	752, 761, 769, 781, 791, 800, 809, 818, 
	826, 827, 829, 830, 833, 842, 851, 860, 
	869, 878, 886, 888, 894, 902, 910, 920, 
	929, 938, 947, 955, 964, 973, 982, 991, 
	1000, 1008, 1017, 1026, 1035, 1043, 1052, 1061, 
	1070, 1079, 1087, 1096, 1105, 1114, 1123, 1131, 
	1140, 1149, 1158, 1166, 1168, 1170, 1172, 1174, 
	1176, 1178, 1180, 1182, 1185, 1194, 1203, 1212, 
	1221, 1229, 1231, 1236, 1241, 1246, 1249, 1258, 
	1267, 1276, 1285, 1293, 1295, 1296, 1297, 1300, 
	1301, 1311, 1323, 1335, 1347, 1357, 1369, 1381, 
	1393, 1405
};

static const char _bbquery_parser_trans_keys[] = {
	0, 10, 13, 32, 44, 58, 99, 100, 
	108, 111, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 0, 10, 13, 32, 
	44, 58, 97, 104, 9, 12, 0, 10, 
	13, 32, 44, 58, 99, 9, 12, 0, 
	10, 13, 32, 44, 58, 104, 9, 12, 
	0, 10, 13, 32, 44, 58, 101, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 111, 102, 110, 102, 32, 9, 13, 
	0, 10, 13, 32, 44, 58, 97, 9, 
	12, 0, 10, 13, 32, 44, 58, 110, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	110, 9, 12, 0, 10, 13, 32, 44, 
	58, 101, 9, 12, 0, 10, 13, 32, 
	44, 58, 108, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 35, 38, 0, 
	10, 13, 32, 44, 58, 0, 10, 13, 
	32, 44, 58, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 0, 10, 13, 
	32, 44, 58, 97, 104, 9, 12, 0, 
	10, 13, 32, 44, 58, 99, 9, 12, 
	0, 10, 13, 32, 44, 58, 104, 9, 
	12, 0, 10, 13, 32, 44, 58, 101, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	97, 9, 12, 0, 10, 13, 32, 44, 
	58, 110, 9, 12, 0, 10, 13, 32, 
	44, 58, 110, 9, 12, 0, 10, 13, 
	32, 44, 58, 101, 9, 12, 0, 10, 
	13, 32, 44, 58, 108, 9, 12, 0, 
	10, 13, 32, 44, 58, 9, 12, 0, 
	10, 13, 32, 44, 58, 97, 9, 12, 
	0, 10, 13, 32, 44, 58, 116, 9, 
	12, 0, 10, 13, 32, 44, 58, 101, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 48, 57, 48, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 48, 57, 
	48, 57, 32, 9, 13, 0, 10, 13, 
	32, 44, 58, 105, 9, 12, 0, 10, 
	13, 32, 44, 58, 109, 9, 12, 0, 
	10, 13, 32, 44, 58, 105, 9, 12, 
	0, 10, 13, 32, 44, 58, 116, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 48, 57, 32, 9, 13, 48, 57, 
	32, 9, 13, 48, 57, 32, 9, 13, 
	48, 57, 32, 9, 13, 0, 10, 13, 
	32, 44, 58, 114, 9, 12, 0, 10, 
	13, 32, 44, 58, 100, 9, 12, 0, 
	10, 13, 32, 44, 58, 101, 9, 12, 
	0, 10, 13, 32, 44, 58, 114, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 97, 100, 115, 99, 32, 9, 13, 
	101, 0, 10, 13, 32, 44, 58, 97, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	116, 9, 12, 0, 10, 13, 32, 44, 
	58, 101, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 0, 10, 13, 32, 
	44, 58, 105, 9, 12, 0, 10, 13, 
	32, 44, 58, 109, 9, 12, 0, 10, 
	13, 32, 44, 58, 105, 9, 12, 0, 
	10, 13, 32, 44, 58, 116, 9, 12, 
	0, 10, 13, 32, 44, 58, 9, 12, 
	0, 10, 13, 32, 44, 58, 114, 9, 
	12, 0, 10, 13, 32, 44, 58, 100, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	101, 9, 12, 0, 10, 13, 32, 44, 
	58, 114, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 0, 10, 13, 32, 
	44, 58, 97, 104, 9, 12, 0, 10, 
	13, 32, 44, 58, 99, 9, 12, 0, 
	10, 13, 32, 44, 58, 104, 9, 12, 
	0, 10, 13, 32, 44, 58, 101, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 0, 10, 13, 32, 44, 58, 97, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	110, 9, 12, 0, 10, 13, 32, 44, 
	58, 110, 9, 12, 0, 10, 13, 32, 
	44, 58, 101, 9, 12, 0, 10, 13, 
	32, 44, 58, 108, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 0, 10, 
	13, 32, 44, 58, 97, 9, 12, 0, 
	10, 13, 32, 44, 58, 116, 9, 12, 
	0, 10, 13, 32, 44, 58, 101, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 0, 10, 13, 32, 44, 58, 105, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	109, 9, 12, 0, 10, 13, 32, 44, 
	58, 105, 9, 12, 0, 10, 13, 32, 
	44, 58, 116, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 0, 10, 13, 
	32, 44, 58, 114, 9, 12, 0, 10, 
	13, 32, 44, 58, 100, 9, 12, 0, 
	10, 13, 32, 44, 58, 101, 9, 12, 
	0, 10, 13, 32, 44, 58, 114, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 0, 10, 13, 32, 44, 58, 99, 
	100, 108, 111, 9, 12, 0, 10, 13, 
	32, 44, 58, 97, 104, 9, 12, 0, 
	10, 13, 32, 44, 58, 99, 9, 12, 
	0, 10, 13, 32, 44, 58, 104, 9, 
	12, 0, 10, 13, 32, 44, 58, 101, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 111, 102, 110, 102, 32, 9, 
	13, 0, 10, 13, 32, 44, 58, 97, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	110, 9, 12, 0, 10, 13, 32, 44, 
	58, 110, 9, 12, 0, 10, 13, 32, 
	44, 58, 101, 9, 12, 0, 10, 13, 
	32, 44, 58, 108, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 35, 38, 
	0, 10, 13, 32, 44, 58, 0, 10, 
	13, 32, 44, 58, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 0, 10, 
	13, 32, 44, 58, 97, 104, 9, 12, 
	0, 10, 13, 32, 44, 58, 99, 9, 
	12, 0, 10, 13, 32, 44, 58, 104, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	101, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 0, 10, 13, 32, 44, 
	58, 97, 9, 12, 0, 10, 13, 32, 
	44, 58, 110, 9, 12, 0, 10, 13, 
	32, 44, 58, 110, 9, 12, 0, 10, 
	13, 32, 44, 58, 101, 9, 12, 0, 
	10, 13, 32, 44, 58, 108, 9, 12, 
	0, 10, 13, 32, 44, 58, 9, 12, 
	0, 10, 13, 32, 44, 58, 97, 9, 
	12, 0, 10, 13, 32, 44, 58, 116, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	101, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 0, 10, 13, 32, 44, 
	58, 105, 9, 12, 0, 10, 13, 32, 
	44, 58, 109, 9, 12, 0, 10, 13, 
	32, 44, 58, 105, 9, 12, 0, 10, 
	13, 32, 44, 58, 116, 9, 12, 0, 
	10, 13, 32, 44, 58, 9, 12, 0, 
	10, 13, 32, 44, 58, 114, 9, 12, 
	0, 10, 13, 32, 44, 58, 100, 9, 
	12, 0, 10, 13, 32, 44, 58, 101, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	114, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 0, 10, 13, 32, 44, 
	58, 97, 9, 12, 0, 10, 13, 32, 
	44, 58, 116, 9, 12, 0, 10, 13, 
	32, 44, 58, 101, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 48, 57, 
	48, 57, 48, 57, 48, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 32, 9, 
	13, 0, 10, 13, 32, 44, 58, 105, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	109, 9, 12, 0, 10, 13, 32, 44, 
	58, 105, 9, 12, 0, 10, 13, 32, 
	44, 58, 116, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 48, 57, 32, 
	9, 13, 48, 57, 32, 9, 13, 48, 
	57, 32, 9, 13, 48, 57, 32, 9, 
	13, 0, 10, 13, 32, 44, 58, 114, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	100, 9, 12, 0, 10, 13, 32, 44, 
	58, 101, 9, 12, 0, 10, 13, 32, 
	44, 58, 114, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 97, 100, 115, 
	99, 32, 9, 13, 101, 0, 10, 13, 
	32, 44, 58, 99, 100, 108, 111, 0, 
	10, 13, 32, 44, 58, 99, 100, 108, 
	111, 9, 12, 0, 10, 13, 32, 44, 
	58, 99, 100, 108, 111, 9, 12, 0, 
	10, 13, 32, 44, 58, 99, 100, 108, 
	111, 9, 12, 0, 10, 13, 32, 44, 
	58, 99, 100, 108, 111, 0, 10, 13, 
	32, 44, 58, 99, 100, 108, 111, 9, 
	12, 0, 10, 13, 32, 44, 58, 99, 
	100, 108, 111, 9, 12, 0, 10, 13, 
	32, 44, 58, 99, 100, 108, 111, 9, 
	12, 0, 10, 13, 32, 44, 58, 99, 
	100, 108, 111, 9, 12, 0, 10, 13, 
	32, 44, 58, 99, 100, 108, 111, 9, 
	12, 0
};

static const char _bbquery_parser_single_lengths[] = {
	0, 10, 6, 6, 8, 7, 7, 7, 
	6, 1, 2, 1, 1, 7, 7, 7, 
	7, 7, 6, 2, 6, 6, 6, 8, 
	7, 7, 7, 6, 7, 7, 7, 7, 
	7, 6, 7, 7, 7, 6, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 7, 
	7, 7, 7, 6, 0, 1, 1, 1, 
	1, 7, 7, 7, 7, 6, 2, 1, 
	1, 1, 1, 7, 7, 7, 6, 7, 
	7, 7, 7, 6, 7, 7, 7, 7, 
	6, 8, 7, 7, 7, 6, 7, 7, 
	7, 7, 7, 6, 7, 7, 7, 6, 
	7, 7, 7, 7, 6, 7, 7, 7, 
	7, 6, 10, 8, 7, 7, 7, 6, 
	1, 2, 1, 1, 7, 7, 7, 7, 
	7, 6, 2, 6, 6, 6, 8, 7, 
	7, 7, 6, 7, 7, 7, 7, 7, 
	6, 7, 7, 7, 6, 7, 7, 7, 
	7, 6, 7, 7, 7, 7, 6, 7, 
	7, 7, 6, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 7, 7, 7, 7, 
	6, 0, 1, 1, 1, 1, 7, 7, 
	7, 7, 6, 2, 1, 1, 1, 1, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10
};

static const char _bbquery_parser_range_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 1, 0, 
	0, 1, 1, 1, 0, 1, 1, 1, 
	1, 1
};

static const short _bbquery_parser_index_offsets[] = {
	0, 0, 12, 20, 28, 38, 47, 56, 
	65, 73, 75, 78, 80, 83, 92, 101, 
	110, 119, 128, 136, 139, 146, 154, 162, 
	172, 181, 190, 199, 207, 216, 225, 234, 
	243, 252, 260, 269, 278, 287, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 314, 
	323, 332, 341, 350, 358, 360, 364, 368, 
	372, 375, 384, 393, 402, 411, 419, 422, 
	424, 426, 429, 431, 440, 449, 458, 466, 
	475, 484, 493, 502, 510, 519, 528, 537, 
	546, 554, 564, 573, 582, 591, 599, 608, 
	617, 626, 635, 644, 652, 661, 670, 679, 
	687, 696, 705, 714, 723, 731, 740, 749, 
	758, 767, 775, 787, 797, 806, 815, 824, 
	832, 834, 837, 839, 842, 851, 860, 869, 
	878, 887, 895, 898, 905, 913, 921, 931, 
	940, 949, 958, 966, 975, 984, 993, 1002, 
	1011, 1019, 1028, 1037, 1046, 1054, 1063, 1072, 
	1081, 1090, 1098, 1107, 1116, 1125, 1134, 1142, 
	1151, 1160, 1169, 1177, 1179, 1181, 1183, 1185, 
	1187, 1189, 1191, 1193, 1196, 1205, 1214, 1223, 
	1232, 1240, 1242, 1246, 1250, 1254, 1257, 1266, 
	1275, 1284, 1293, 1301, 1304, 1306, 1308, 1311, 
	1313, 1324, 1336, 1348, 1360, 1371, 1383, 1395, 
	1407, 1419
};

static const unsigned char _bbquery_parser_indicies[] = {
	1, 3, 3, 3, 1, 1, 4, 5, 
	6, 7, 2, 0, 1, 10, 10, 10, 
	1, 1, 9, 8, 1, 13, 13, 13, 
	1, 1, 12, 11, 1, 13, 13, 13, 
	1, 1, 14, 15, 12, 11, 1, 13, 
	13, 13, 1, 1, 16, 12, 11, 1, 
	13, 13, 13, 1, 1, 17, 12, 11, 
	1, 13, 13, 13, 1, 1, 18, 12, 
	11, 1, 13, 13, 13, 1, 19, 12, 
	11, 20, 1, 21, 22, 1, 22, 1, 
	23, 23, 1, 1, 13, 13, 13, 1, 
	1, 24, 12, 11, 1, 13, 13, 13, 
	1, 1, 25, 12, 11, 1, 13, 13, 
	13, 1, 1, 26, 12, 11, 1, 13, 
	13, 13, 1, 1, 27, 12, 11, 1, 
	13, 13, 13, 1, 1, 28, 12, 11, 
	1, 13, 13, 13, 1, 29, 12, 11, 
	30, 30, 1, 1, 1, 1, 1, 1, 
	1, 31, 1, 33, 33, 33, 1, 1, 
	32, 31, 1, 36, 36, 36, 1, 1, 
	35, 34, 1, 36, 36, 36, 1, 1, 
	37, 38, 35, 34, 1, 36, 36, 36, 
	1, 1, 39, 35, 34, 1, 36, 36, 
	36, 1, 1, 40, 35, 34, 1, 36, 
	36, 36, 1, 1, 41, 35, 34, 1, 
	36, 36, 36, 1, 19, 35, 34, 1, 
	36, 36, 36, 1, 1, 42, 35, 34, 
	1, 36, 36, 36, 1, 1, 43, 35, 
	34, 1, 36, 36, 36, 1, 1, 44, 
	35, 34, 1, 36, 36, 36, 1, 1, 
	45, 35, 34, 1, 36, 36, 36, 1, 
	1, 46, 35, 34, 1, 36, 36, 36, 
	1, 29, 35, 34, 1, 36, 36, 36, 
	1, 1, 47, 35, 34, 1, 36, 36, 
	36, 1, 1, 48, 35, 34, 1, 36, 
	36, 36, 1, 1, 49, 35, 34, 1, 
	36, 36, 36, 1, 50, 35, 34, 51, 
	1, 52, 1, 53, 1, 54, 1, 55, 
	1, 56, 1, 57, 1, 58, 1, 59, 
	59, 1, 1, 36, 36, 36, 1, 1, 
	60, 35, 34, 1, 36, 36, 36, 1, 
	1, 61, 35, 34, 1, 36, 36, 36, 
	1, 1, 62, 35, 34, 1, 36, 36, 
	36, 1, 1, 63, 35, 34, 1, 36, 
	36, 36, 1, 64, 35, 34, 65, 1, 
	66, 66, 67, 1, 66, 66, 68, 1, 
	66, 66, 69, 1, 66, 66, 1, 1, 
	36, 36, 36, 1, 1, 70, 35, 34, 
	1, 36, 36, 36, 1, 1, 71, 35, 
	34, 1, 36, 36, 36, 1, 1, 72, 
	35, 34, 1, 36, 36, 36, 1, 1, 
	73, 35, 34, 1, 36, 36, 36, 1, 
	74, 35, 34, 75, 76, 1, 77, 1, 
	78, 1, 79, 79, 1, 80, 1, 1, 
	13, 13, 13, 1, 1, 81, 12, 11, 
	1, 13, 13, 13, 1, 1, 82, 12, 
	11, 1, 13, 13, 13, 1, 1, 83, 
	12, 11, 1, 13, 13, 13, 1, 50, 
	12, 11, 1, 13, 13, 13, 1, 1, 
	84, 12, 11, 1, 13, 13, 13, 1, 
	1, 85, 12, 11, 1, 13, 13, 13, 
	1, 1, 86, 12, 11, 1, 13, 13, 
	13, 1, 1, 87, 12, 11, 1, 13, 
	13, 13, 1, 64, 12, 11, 1, 13, 
	13, 13, 1, 1, 88, 12, 11, 1, 
	13, 13, 13, 1, 1, 89, 12, 11, 
	1, 13, 13, 13, 1, 1, 90, 12, 
	11, 1, 13, 13, 13, 1, 1, 91, 
	12, 11, 1, 13, 13, 13, 1, 74, 
	12, 11, 1, 10, 10, 10, 1, 1, 
	92, 93, 9, 8, 1, 10, 10, 10, 
	1, 1, 94, 9, 8, 1, 10, 10, 
	10, 1, 1, 95, 9, 8, 1, 10, 
	10, 10, 1, 1, 96, 9, 8, 1, 
	10, 10, 10, 1, 19, 9, 8, 1, 
	10, 10, 10, 1, 1, 97, 9, 8, 
	1, 10, 10, 10, 1, 1, 98, 9, 
	8, 1, 10, 10, 10, 1, 1, 99, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	100, 9, 8, 1, 10, 10, 10, 1, 
	1, 101, 9, 8, 1, 10, 10, 10, 
	1, 29, 9, 8, 1, 10, 10, 10, 
	1, 1, 102, 9, 8, 1, 10, 10, 
	10, 1, 1, 103, 9, 8, 1, 10, 
	10, 10, 1, 1, 104, 9, 8, 1, 
	10, 10, 10, 1, 50, 9, 8, 1, 
	10, 10, 10, 1, 1, 105, 9, 8, 
	1, 10, 10, 10, 1, 1, 106, 9, 
	8, 1, 10, 10, 10, 1, 1, 107, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	108, 9, 8, 1, 10, 10, 10, 1, 
	64, 9, 8, 1, 10, 10, 10, 1, 
	1, 109, 9, 8, 1, 10, 10, 10, 
	1, 1, 110, 9, 8, 1, 10, 10, 
	10, 1, 1, 111, 9, 8, 1, 10, 
	10, 10, 1, 1, 112, 9, 8, 1, 
	10, 10, 10, 1, 74, 9, 8, 1, 
	10, 10, 10, 1, 1, 4, 5, 6, 
	7, 113, 0, 1, 10, 10, 10, 1, 
	1, 114, 115, 9, 8, 1, 10, 10, 
	10, 1, 1, 116, 9, 8, 1, 10, 
	10, 10, 1, 1, 117, 9, 8, 1, 
	10, 10, 10, 1, 1, 118, 9, 8, 
	1, 10, 10, 10, 1, 119, 9, 8, 
	120, 1, 121, 122, 1, 122, 1, 123, 
	123, 1, 1, 10, 10, 10, 1, 1, 
	124, 9, 8, 1, 10, 10, 10, 1, 
	1, 125, 9, 8, 1, 10, 10, 10, 
	1, 1, 126, 9, 8, 1, 10, 10, 
	10, 1, 1, 127, 9, 8, 1, 10, 
	10, 10, 1, 1, 128, 9, 8, 1, 
	10, 10, 10, 1, 129, 9, 8, 130, 
	130, 1, 1, 1, 1, 1, 1, 1, 
	131, 1, 133, 133, 133, 1, 1, 132, 
	131, 1, 136, 136, 136, 1, 1, 135, 
	134, 1, 136, 136, 136, 1, 1, 137, 
	138, 135, 134, 1, 136, 136, 136, 1, 
	1, 139, 135, 134, 1, 136, 136, 136, 
	1, 1, 140, 135, 134, 1, 136, 136, 
	136, 1, 1, 141, 135, 134, 1, 136, 
	136, 136, 1, 19, 135, 134, 1, 136, 
	136, 136, 1, 1, 142, 135, 134, 1, 
	136, 136, 136, 1, 1, 143, 135, 134, 
	1, 136, 136, 136, 1, 1, 144, 135, 
	134, 1, 136, 136, 136, 1, 1, 145, 
	135, 134, 1, 136, 136, 136, 1, 1, 
	146, 135, 134, 1, 136, 136, 136, 1, 
	29, 135, 134, 1, 136, 136, 136, 1, 
	1, 147, 135, 134, 1, 136, 136, 136, 
	1, 1, 148, 135, 134, 1, 136, 136, 
	136, 1, 1, 149, 135, 134, 1, 136, 
	136, 136, 1, 50, 135, 134, 1, 136, 
	136, 136, 1, 1, 150, 135, 134, 1, 
	136, 136, 136, 1, 1, 151, 135, 134, 
	1, 136, 136, 136, 1, 1, 152, 135, 
	134, 1, 136, 136, 136, 1, 1, 153, 
	135, 134, 1, 136, 136, 136, 1, 64, 
	135, 134, 1, 136, 136, 136, 1, 1, 
	154, 135, 134, 1, 136, 136, 136, 1, 
	1, 155, 135, 134, 1, 136, 136, 136, 
	1, 1, 156, 135, 134, 1, 136, 136, 
	136, 1, 1, 157, 135, 134, 1, 136, 
	136, 136, 1, 74, 135, 134, 1, 10, 
	10, 10, 1, 1, 158, 9, 8, 1, 
	10, 10, 10, 1, 1, 159, 9, 8, 
	1, 10, 10, 10, 1, 1, 160, 9, 
	8, 1, 10, 10, 10, 1, 161, 9, 
	8, 162, 1, 163, 1, 164, 1, 165, 
	1, 166, 1, 167, 1, 168, 1, 169, 
	1, 170, 170, 1, 1, 10, 10, 10, 
	1, 1, 171, 9, 8, 1, 10, 10, 
	10, 1, 1, 172, 9, 8, 1, 10, 
	10, 10, 1, 1, 173, 9, 8, 1, 
	10, 10, 10, 1, 1, 174, 9, 8, 
	1, 10, 10, 10, 1, 175, 9, 8, 
	176, 1, 177, 177, 178, 1, 177, 177, 
	179, 1, 177, 177, 180, 1, 177, 177, 
	1, 1, 10, 10, 10, 1, 1, 181, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	182, 9, 8, 1, 10, 10, 10, 1, 
	1, 183, 9, 8, 1, 10, 10, 10, 
	1, 1, 184, 9, 8, 1, 10, 10, 
	10, 1, 185, 9, 8, 186, 187, 1, 
	188, 1, 189, 1, 190, 190, 1, 191, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	5, 6, 7, 0, 192, 10, 10, 10, 
	192, 192, 194, 195, 196, 197, 193, 0, 
	192, 200, 200, 200, 192, 192, 201, 202, 
	203, 204, 199, 198, 192, 13, 13, 13, 
	192, 192, 201, 202, 203, 204, 205, 198, 
	192, 192, 192, 192, 192, 192, 201, 202, 
	203, 204, 198, 192, 33, 33, 33, 192, 
	192, 208, 209, 210, 211, 207, 206, 192, 
	36, 36, 36, 192, 192, 208, 209, 210, 
	211, 212, 206, 192, 10, 10, 10, 192, 
	192, 201, 202, 203, 204, 213, 198, 192, 
	133, 133, 133, 192, 192, 216, 217, 218, 
	219, 215, 214, 192, 136, 136, 136, 192, 
	192, 216, 217, 218, 219, 220, 214, 0
};

static const unsigned char _bbquery_parser_trans_targs[] = {
	2, 0, 106, 184, 107, 151, 164, 174, 
	2, 185, 186, 3, 187, 188, 5, 13, 
	6, 7, 8, 9, 10, 11, 12, 188, 
	14, 15, 16, 17, 18, 19, 20, 21, 
	189, 188, 22, 190, 188, 24, 28, 25, 
	26, 27, 29, 30, 31, 32, 33, 35, 
	36, 37, 38, 39, 40, 41, 42, 43, 
	44, 45, 46, 188, 48, 49, 50, 51, 
	52, 53, 188, 54, 55, 56, 58, 59, 
	60, 61, 62, 63, 66, 64, 65, 188, 
	63, 68, 69, 70, 72, 73, 74, 75, 
	77, 78, 79, 80, 82, 86, 83, 84, 
	85, 87, 88, 89, 90, 91, 93, 94, 
	95, 97, 98, 99, 100, 102, 103, 104, 
	105, 185, 108, 116, 109, 110, 111, 112, 
	113, 114, 115, 186, 117, 118, 119, 120, 
	121, 122, 123, 124, 192, 186, 125, 193, 
	186, 127, 131, 128, 129, 130, 132, 133, 
	134, 135, 136, 138, 139, 140, 142, 143, 
	144, 145, 147, 148, 149, 150, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 186, 165, 166, 167, 168, 169, 
	170, 186, 171, 172, 173, 175, 176, 177, 
	178, 179, 180, 183, 181, 182, 186, 180, 
	0, 185, 81, 92, 96, 101, 3, 191, 
	186, 4, 67, 71, 76, 187, 22, 190, 
	23, 34, 47, 57, 190, 191, 125, 193, 
	126, 137, 141, 146, 193
};

static const char _bbquery_parser_trans_actions[] = {
	1, 25, 1, 0, 1, 1, 1, 1, 
	0, 3, 3, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 9, 0, 
	11, 11, 0, 33, 33, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 0, 0, 
	0, 17, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 23, 0, 0, 0, 0, 
	0, 0, 9, 0, 11, 11, 0, 39, 
	39, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 0, 0, 0, 0, 0, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	17, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 15, 0, 
	0, 30, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 30, 1, 36, 
	1, 1, 1, 1, 42, 30, 1, 36, 
	1, 1, 1, 1, 46
};

static const char _bbquery_parser_eof_actions[] = {
	0, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const int bbquery_parser_start = 1;
static const int bbquery_parser_first_final = 185;
static const int bbquery_parser_error = 0;

static const int bbquery_parser_en_main = 1;


#line 67 "query_parser.rl"

std::string* substr(const char* start, const char* end)
{
  char *buf = (char *)calloc((end - start + 1), sizeof(char));
  std::string *str;
  memcpy(buf, start, end - start);
  str = new std::string(buf);
  free(buf);
  return str;
}

QueryParser::QueryParser() {
}

QueryParser::~QueryParser() {
}

Query*
QueryParser::parse( const std::string& query_string ) {
  Query *query = new Query();

  const char* p = query_string.c_str();
  const char* pe = (const char*)(query_string.length() + query_string.length());
  const char* eof = pe;
  int cs;
  const char* begin = NULL;
  bool parse_result = true;

  std::cout << "***" << query_string << std::endl;

  
#line 626 "query_parser.cpp"
	{
	cs = bbquery_parser_start;
	}

#line 98 "query_parser.rl"
  
#line 633 "query_parser.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _bbquery_parser_trans_keys + _bbquery_parser_key_offsets[cs];
	_trans = _bbquery_parser_index_offsets[cs];

	_klen = _bbquery_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _bbquery_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _bbquery_parser_indicies[_trans];
	cs = _bbquery_parser_trans_targs[_trans];

	if ( _bbquery_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _bbquery_parser_actions + _bbquery_parser_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 6 "query_parser.rl"
	{ begin = p; }
	break;
	case 1:
#line 7 "query_parser.rl"
	{
    puts("parse query");
    query->words->push_back(substr(begin, p));
  }
	break;
	case 2:
#line 12 "query_parser.rl"
	{ begin = p; }
	break;
	case 3:
#line 13 "query_parser.rl"
	{
    puts("parse date");
    query->date = substr(begin, p);
  }
	break;
	case 4:
#line 18 "query_parser.rl"
	{ begin = p; }
	break;
	case 5:
#line 19 "query_parser.rl"
	{
    puts("parse channel");
    query->channel = substr(begin, p);
  }
	break;
	case 6:
#line 24 "query_parser.rl"
	{ begin = p; }
	break;
	case 7:
#line 25 "query_parser.rl"
	{
    puts("parse order by");
    query->order = substr(begin, p);
  }
	break;
	case 8:
#line 30 "query_parser.rl"
	{ begin = p; }
	break;
	case 9:
#line 31 "query_parser.rl"
	{
    puts("parse limit");
    query->limit = substr(begin, p);
  }
	break;
	case 10:
#line 36 "query_parser.rl"
	{ begin = p; }
	break;
	case 11:
#line 37 "query_parser.rl"
	{
    puts("parse cache");
    query->cache = substr(begin, p);
  }
	break;
	case 12:
#line 42 "query_parser.rl"
	{ 
    puts("parse error");
    parse_result = false;
  }
	break;
#line 780 "query_parser.cpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _bbquery_parser_actions + _bbquery_parser_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 12:
#line 42 "query_parser.rl"
	{ 
    puts("parse error");
    parse_result = false;
  }
	break;
#line 803 "query_parser.cpp"
		}
	}
	}

	_out: {}
	}

#line 99 "query_parser.rl"

//   if (query->date)
//     std::cerr << *(query->date) << std::endl;
//   if (query->channel)
//     std::cerr << *(query->channel) << std::endl;
//   if (!query->words->empty())
//   {
//     std::vector<std::string*>::iterator it = query->words->begin();
//     while (it != query->words->end() )
//     {
//       std::cerr << *(*it) << std::endl;
//       ++it;
//     }
//   }

  if (parse_result)
  {
    return query;
  }
  else
  {
    return NULL;
  }
}
