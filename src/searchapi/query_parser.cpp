
#line 1 "query_parser.rl"
#include "query_parser.h"


#line 57 "query_parser.rl"



#line 11 "query_parser.cpp"
static const char _bbquery_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 2, 
	0, 1, 2, 1, 0, 2, 1, 5, 
	2, 5, 0, 2, 5, 1, 3, 1, 
	5, 0, 3, 5, 1, 0
};

static const short _bbquery_parser_key_offsets[] = {
	0, 0, 12, 20, 28, 37, 46, 55, 
	64, 73, 82, 90, 92, 98, 106, 114, 
	123, 132, 141, 150, 159, 168, 176, 185, 
	194, 203, 211, 213, 215, 217, 219, 221, 
	223, 225, 227, 230, 239, 248, 257, 266, 
	274, 276, 281, 286, 291, 294, 303, 312, 
	321, 330, 338, 340, 341, 342, 345, 346, 
	355, 364, 373, 381, 390, 399, 408, 417, 
	425, 434, 443, 452, 461, 469, 478, 487, 
	496, 505, 514, 523, 531, 540, 549, 558, 
	566, 575, 584, 593, 602, 610, 619, 628, 
	637, 646, 654, 666, 675, 684, 693, 702, 
	711, 720, 728, 730, 736, 744, 752, 761, 
	770, 779, 788, 797, 806, 814, 823, 832, 
	841, 849, 858, 867, 876, 885, 893, 902, 
	911, 920, 929, 937, 946, 955, 964, 972, 
	974, 976, 978, 980, 982, 984, 986, 988, 
	991, 1000, 1009, 1018, 1027, 1035, 1037, 1042, 
	1047, 1052, 1055, 1064, 1073, 1082, 1091, 1099, 
	1101, 1102, 1103, 1106, 1107, 1117, 1129, 1141, 
	1153, 1163, 1175, 1187, 1199, 1211
};

static const char _bbquery_parser_trans_keys[] = {
	0, 10, 13, 32, 44, 58, 99, 100, 
	108, 111, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 0, 10, 13, 32, 
	44, 58, 104, 9, 12, 0, 10, 13, 
	32, 44, 58, 97, 9, 12, 0, 10, 
	13, 32, 44, 58, 110, 9, 12, 0, 
	10, 13, 32, 44, 58, 110, 9, 12, 
	0, 10, 13, 32, 44, 58, 101, 9, 
	12, 0, 10, 13, 32, 44, 58, 108, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 35, 38, 0, 10, 13, 32, 
	44, 58, 0, 10, 13, 32, 44, 58, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	104, 9, 12, 0, 10, 13, 32, 44, 
	58, 97, 9, 12, 0, 10, 13, 32, 
	44, 58, 110, 9, 12, 0, 10, 13, 
	32, 44, 58, 110, 9, 12, 0, 10, 
	13, 32, 44, 58, 101, 9, 12, 0, 
	10, 13, 32, 44, 58, 108, 9, 12, 
	0, 10, 13, 32, 44, 58, 9, 12, 
	0, 10, 13, 32, 44, 58, 97, 9, 
	12, 0, 10, 13, 32, 44, 58, 116, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	101, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 48, 57, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 48, 
	57, 48, 57, 32, 9, 13, 0, 10, 
	13, 32, 44, 58, 105, 9, 12, 0, 
	10, 13, 32, 44, 58, 109, 9, 12, 
	0, 10, 13, 32, 44, 58, 105, 9, 
	12, 0, 10, 13, 32, 44, 58, 116, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 48, 57, 32, 9, 13, 48, 
	57, 32, 9, 13, 48, 57, 32, 9, 
	13, 48, 57, 32, 9, 13, 0, 10, 
	13, 32, 44, 58, 114, 9, 12, 0, 
	10, 13, 32, 44, 58, 100, 9, 12, 
	0, 10, 13, 32, 44, 58, 101, 9, 
	12, 0, 10, 13, 32, 44, 58, 114, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 97, 100, 115, 99, 32, 9, 
	13, 101, 0, 10, 13, 32, 44, 58, 
	97, 9, 12, 0, 10, 13, 32, 44, 
	58, 116, 9, 12, 0, 10, 13, 32, 
	44, 58, 101, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 0, 10, 13, 
	32, 44, 58, 105, 9, 12, 0, 10, 
	13, 32, 44, 58, 109, 9, 12, 0, 
	10, 13, 32, 44, 58, 105, 9, 12, 
	0, 10, 13, 32, 44, 58, 116, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 0, 10, 13, 32, 44, 58, 114, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	100, 9, 12, 0, 10, 13, 32, 44, 
	58, 101, 9, 12, 0, 10, 13, 32, 
	44, 58, 114, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 0, 10, 13, 
	32, 44, 58, 104, 9, 12, 0, 10, 
	13, 32, 44, 58, 97, 9, 12, 0, 
	10, 13, 32, 44, 58, 110, 9, 12, 
	0, 10, 13, 32, 44, 58, 110, 9, 
	12, 0, 10, 13, 32, 44, 58, 101, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	108, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 0, 10, 13, 32, 44, 
	58, 97, 9, 12, 0, 10, 13, 32, 
	44, 58, 116, 9, 12, 0, 10, 13, 
	32, 44, 58, 101, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 0, 10, 
	13, 32, 44, 58, 105, 9, 12, 0, 
	10, 13, 32, 44, 58, 109, 9, 12, 
	0, 10, 13, 32, 44, 58, 105, 9, 
	12, 0, 10, 13, 32, 44, 58, 116, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	114, 9, 12, 0, 10, 13, 32, 44, 
	58, 100, 9, 12, 0, 10, 13, 32, 
	44, 58, 101, 9, 12, 0, 10, 13, 
	32, 44, 58, 114, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 0, 10, 
	13, 32, 44, 58, 99, 100, 108, 111, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	104, 9, 12, 0, 10, 13, 32, 44, 
	58, 97, 9, 12, 0, 10, 13, 32, 
	44, 58, 110, 9, 12, 0, 10, 13, 
	32, 44, 58, 110, 9, 12, 0, 10, 
	13, 32, 44, 58, 101, 9, 12, 0, 
	10, 13, 32, 44, 58, 108, 9, 12, 
	0, 10, 13, 32, 44, 58, 9, 12, 
	35, 38, 0, 10, 13, 32, 44, 58, 
	0, 10, 13, 32, 44, 58, 9, 12, 
	0, 10, 13, 32, 44, 58, 9, 12, 
	0, 10, 13, 32, 44, 58, 104, 9, 
	12, 0, 10, 13, 32, 44, 58, 97, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	110, 9, 12, 0, 10, 13, 32, 44, 
	58, 110, 9, 12, 0, 10, 13, 32, 
	44, 58, 101, 9, 12, 0, 10, 13, 
	32, 44, 58, 108, 9, 12, 0, 10, 
	13, 32, 44, 58, 9, 12, 0, 10, 
	13, 32, 44, 58, 97, 9, 12, 0, 
	10, 13, 32, 44, 58, 116, 9, 12, 
	0, 10, 13, 32, 44, 58, 101, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 0, 10, 13, 32, 44, 58, 105, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	109, 9, 12, 0, 10, 13, 32, 44, 
	58, 105, 9, 12, 0, 10, 13, 32, 
	44, 58, 116, 9, 12, 0, 10, 13, 
	32, 44, 58, 9, 12, 0, 10, 13, 
	32, 44, 58, 114, 9, 12, 0, 10, 
	13, 32, 44, 58, 100, 9, 12, 0, 
	10, 13, 32, 44, 58, 101, 9, 12, 
	0, 10, 13, 32, 44, 58, 114, 9, 
	12, 0, 10, 13, 32, 44, 58, 9, 
	12, 0, 10, 13, 32, 44, 58, 97, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	116, 9, 12, 0, 10, 13, 32, 44, 
	58, 101, 9, 12, 0, 10, 13, 32, 
	44, 58, 9, 12, 48, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 48, 57, 
	48, 57, 48, 57, 32, 9, 13, 0, 
	10, 13, 32, 44, 58, 105, 9, 12, 
	0, 10, 13, 32, 44, 58, 109, 9, 
	12, 0, 10, 13, 32, 44, 58, 105, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	116, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 48, 57, 32, 9, 13, 
	48, 57, 32, 9, 13, 48, 57, 32, 
	9, 13, 48, 57, 32, 9, 13, 0, 
	10, 13, 32, 44, 58, 114, 9, 12, 
	0, 10, 13, 32, 44, 58, 100, 9, 
	12, 0, 10, 13, 32, 44, 58, 101, 
	9, 12, 0, 10, 13, 32, 44, 58, 
	114, 9, 12, 0, 10, 13, 32, 44, 
	58, 9, 12, 97, 100, 115, 99, 32, 
	9, 13, 101, 0, 10, 13, 32, 44, 
	58, 99, 100, 108, 111, 0, 10, 13, 
	32, 44, 58, 99, 100, 108, 111, 9, 
	12, 0, 10, 13, 32, 44, 58, 99, 
	100, 108, 111, 9, 12, 0, 10, 13, 
	32, 44, 58, 99, 100, 108, 111, 9, 
	12, 0, 10, 13, 32, 44, 58, 99, 
	100, 108, 111, 0, 10, 13, 32, 44, 
	58, 99, 100, 108, 111, 9, 12, 0, 
	10, 13, 32, 44, 58, 99, 100, 108, 
	111, 9, 12, 0, 10, 13, 32, 44, 
	58, 99, 100, 108, 111, 9, 12, 0, 
	10, 13, 32, 44, 58, 99, 100, 108, 
	111, 9, 12, 0, 10, 13, 32, 44, 
	58, 99, 100, 108, 111, 9, 12, 0
};

static const char _bbquery_parser_single_lengths[] = {
	0, 10, 6, 6, 7, 7, 7, 7, 
	7, 7, 6, 2, 6, 6, 6, 7, 
	7, 7, 7, 7, 7, 6, 7, 7, 
	7, 6, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 7, 7, 7, 7, 6, 
	0, 1, 1, 1, 1, 7, 7, 7, 
	7, 6, 2, 1, 1, 1, 1, 7, 
	7, 7, 6, 7, 7, 7, 7, 6, 
	7, 7, 7, 7, 6, 7, 7, 7, 
	7, 7, 7, 6, 7, 7, 7, 6, 
	7, 7, 7, 7, 6, 7, 7, 7, 
	7, 6, 10, 7, 7, 7, 7, 7, 
	7, 6, 2, 6, 6, 6, 7, 7, 
	7, 7, 7, 7, 6, 7, 7, 7, 
	6, 7, 7, 7, 7, 6, 7, 7, 
	7, 7, 6, 7, 7, 7, 6, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	7, 7, 7, 7, 6, 0, 1, 1, 
	1, 1, 7, 7, 7, 7, 6, 2, 
	1, 1, 1, 1, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10
};

static const char _bbquery_parser_range_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 1, 1, 1, 
	0, 1, 1, 1, 1, 1
};

static const short _bbquery_parser_index_offsets[] = {
	0, 0, 12, 20, 28, 37, 46, 55, 
	64, 73, 82, 90, 93, 100, 108, 116, 
	125, 134, 143, 152, 161, 170, 178, 187, 
	196, 205, 213, 215, 217, 219, 221, 223, 
	225, 227, 229, 232, 241, 250, 259, 268, 
	276, 278, 282, 286, 290, 293, 302, 311, 
	320, 329, 337, 340, 342, 344, 347, 349, 
	358, 367, 376, 384, 393, 402, 411, 420, 
	428, 437, 446, 455, 464, 472, 481, 490, 
	499, 508, 517, 526, 534, 543, 552, 561, 
	569, 578, 587, 596, 605, 613, 622, 631, 
	640, 649, 657, 669, 678, 687, 696, 705, 
	714, 723, 731, 734, 741, 749, 757, 766, 
	775, 784, 793, 802, 811, 819, 828, 837, 
	846, 854, 863, 872, 881, 890, 898, 907, 
	916, 925, 934, 942, 951, 960, 969, 977, 
	979, 981, 983, 985, 987, 989, 991, 993, 
	996, 1005, 1014, 1023, 1032, 1040, 1042, 1046, 
	1050, 1054, 1057, 1066, 1075, 1084, 1093, 1101, 
	1104, 1106, 1108, 1111, 1113, 1124, 1136, 1148, 
	1160, 1171, 1183, 1195, 1207, 1219
};

static const unsigned char _bbquery_parser_indicies[] = {
	1, 3, 3, 3, 1, 1, 4, 5, 
	6, 7, 2, 0, 1, 10, 10, 10, 
	1, 1, 9, 8, 1, 13, 13, 13, 
	1, 1, 12, 11, 1, 13, 13, 13, 
	1, 1, 14, 12, 11, 1, 13, 13, 
	13, 1, 1, 15, 12, 11, 1, 13, 
	13, 13, 1, 1, 16, 12, 11, 1, 
	13, 13, 13, 1, 1, 17, 12, 11, 
	1, 13, 13, 13, 1, 1, 18, 12, 
	11, 1, 13, 13, 13, 1, 1, 19, 
	12, 11, 1, 13, 13, 13, 1, 20, 
	12, 11, 21, 21, 1, 1, 1, 1, 
	1, 1, 1, 22, 1, 24, 24, 24, 
	1, 1, 23, 22, 1, 27, 27, 27, 
	1, 1, 26, 25, 1, 27, 27, 27, 
	1, 1, 28, 26, 25, 1, 27, 27, 
	27, 1, 1, 29, 26, 25, 1, 27, 
	27, 27, 1, 1, 30, 26, 25, 1, 
	27, 27, 27, 1, 1, 31, 26, 25, 
	1, 27, 27, 27, 1, 1, 32, 26, 
	25, 1, 27, 27, 27, 1, 1, 33, 
	26, 25, 1, 27, 27, 27, 1, 20, 
	26, 25, 1, 27, 27, 27, 1, 1, 
	34, 26, 25, 1, 27, 27, 27, 1, 
	1, 35, 26, 25, 1, 27, 27, 27, 
	1, 1, 36, 26, 25, 1, 27, 27, 
	27, 1, 37, 26, 25, 38, 1, 39, 
	1, 40, 1, 41, 1, 42, 1, 43, 
	1, 44, 1, 45, 1, 46, 46, 1, 
	1, 27, 27, 27, 1, 1, 47, 26, 
	25, 1, 27, 27, 27, 1, 1, 48, 
	26, 25, 1, 27, 27, 27, 1, 1, 
	49, 26, 25, 1, 27, 27, 27, 1, 
	1, 50, 26, 25, 1, 27, 27, 27, 
	1, 51, 26, 25, 52, 1, 53, 53, 
	54, 1, 53, 53, 55, 1, 53, 53, 
	56, 1, 53, 53, 1, 1, 27, 27, 
	27, 1, 1, 57, 26, 25, 1, 27, 
	27, 27, 1, 1, 58, 26, 25, 1, 
	27, 27, 27, 1, 1, 59, 26, 25, 
	1, 27, 27, 27, 1, 1, 60, 26, 
	25, 1, 27, 27, 27, 1, 61, 26, 
	25, 62, 63, 1, 64, 1, 65, 1, 
	66, 66, 1, 67, 1, 1, 13, 13, 
	13, 1, 1, 68, 12, 11, 1, 13, 
	13, 13, 1, 1, 69, 12, 11, 1, 
	13, 13, 13, 1, 1, 70, 12, 11, 
	1, 13, 13, 13, 1, 37, 12, 11, 
	1, 13, 13, 13, 1, 1, 71, 12, 
	11, 1, 13, 13, 13, 1, 1, 72, 
	12, 11, 1, 13, 13, 13, 1, 1, 
	73, 12, 11, 1, 13, 13, 13, 1, 
	1, 74, 12, 11, 1, 13, 13, 13, 
	1, 51, 12, 11, 1, 13, 13, 13, 
	1, 1, 75, 12, 11, 1, 13, 13, 
	13, 1, 1, 76, 12, 11, 1, 13, 
	13, 13, 1, 1, 77, 12, 11, 1, 
	13, 13, 13, 1, 1, 78, 12, 11, 
	1, 13, 13, 13, 1, 61, 12, 11, 
	1, 10, 10, 10, 1, 1, 79, 9, 
	8, 1, 10, 10, 10, 1, 1, 80, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	81, 9, 8, 1, 10, 10, 10, 1, 
	1, 82, 9, 8, 1, 10, 10, 10, 
	1, 1, 83, 9, 8, 1, 10, 10, 
	10, 1, 1, 84, 9, 8, 1, 10, 
	10, 10, 1, 20, 9, 8, 1, 10, 
	10, 10, 1, 1, 85, 9, 8, 1, 
	10, 10, 10, 1, 1, 86, 9, 8, 
	1, 10, 10, 10, 1, 1, 87, 9, 
	8, 1, 10, 10, 10, 1, 37, 9, 
	8, 1, 10, 10, 10, 1, 1, 88, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	89, 9, 8, 1, 10, 10, 10, 1, 
	1, 90, 9, 8, 1, 10, 10, 10, 
	1, 1, 91, 9, 8, 1, 10, 10, 
	10, 1, 51, 9, 8, 1, 10, 10, 
	10, 1, 1, 92, 9, 8, 1, 10, 
	10, 10, 1, 1, 93, 9, 8, 1, 
	10, 10, 10, 1, 1, 94, 9, 8, 
	1, 10, 10, 10, 1, 1, 95, 9, 
	8, 1, 10, 10, 10, 1, 61, 9, 
	8, 1, 10, 10, 10, 1, 1, 4, 
	5, 6, 7, 96, 0, 1, 10, 10, 
	10, 1, 1, 97, 9, 8, 1, 10, 
	10, 10, 1, 1, 98, 9, 8, 1, 
	10, 10, 10, 1, 1, 99, 9, 8, 
	1, 10, 10, 10, 1, 1, 100, 9, 
	8, 1, 10, 10, 10, 1, 1, 101, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	102, 9, 8, 1, 10, 10, 10, 1, 
	103, 9, 8, 104, 104, 1, 1, 1, 
	1, 1, 1, 1, 105, 1, 107, 107, 
	107, 1, 1, 106, 105, 1, 110, 110, 
	110, 1, 1, 109, 108, 1, 110, 110, 
	110, 1, 1, 111, 109, 108, 1, 110, 
	110, 110, 1, 1, 112, 109, 108, 1, 
	110, 110, 110, 1, 1, 113, 109, 108, 
	1, 110, 110, 110, 1, 1, 114, 109, 
	108, 1, 110, 110, 110, 1, 1, 115, 
	109, 108, 1, 110, 110, 110, 1, 1, 
	116, 109, 108, 1, 110, 110, 110, 1, 
	20, 109, 108, 1, 110, 110, 110, 1, 
	1, 117, 109, 108, 1, 110, 110, 110, 
	1, 1, 118, 109, 108, 1, 110, 110, 
	110, 1, 1, 119, 109, 108, 1, 110, 
	110, 110, 1, 37, 109, 108, 1, 110, 
	110, 110, 1, 1, 120, 109, 108, 1, 
	110, 110, 110, 1, 1, 121, 109, 108, 
	1, 110, 110, 110, 1, 1, 122, 109, 
	108, 1, 110, 110, 110, 1, 1, 123, 
	109, 108, 1, 110, 110, 110, 1, 51, 
	109, 108, 1, 110, 110, 110, 1, 1, 
	124, 109, 108, 1, 110, 110, 110, 1, 
	1, 125, 109, 108, 1, 110, 110, 110, 
	1, 1, 126, 109, 108, 1, 110, 110, 
	110, 1, 1, 127, 109, 108, 1, 110, 
	110, 110, 1, 61, 109, 108, 1, 10, 
	10, 10, 1, 1, 128, 9, 8, 1, 
	10, 10, 10, 1, 1, 129, 9, 8, 
	1, 10, 10, 10, 1, 1, 130, 9, 
	8, 1, 10, 10, 10, 1, 131, 9, 
	8, 132, 1, 133, 1, 134, 1, 135, 
	1, 136, 1, 137, 1, 138, 1, 139, 
	1, 140, 140, 1, 1, 10, 10, 10, 
	1, 1, 141, 9, 8, 1, 10, 10, 
	10, 1, 1, 142, 9, 8, 1, 10, 
	10, 10, 1, 1, 143, 9, 8, 1, 
	10, 10, 10, 1, 1, 144, 9, 8, 
	1, 10, 10, 10, 1, 145, 9, 8, 
	146, 1, 147, 147, 148, 1, 147, 147, 
	149, 1, 147, 147, 150, 1, 147, 147, 
	1, 1, 10, 10, 10, 1, 1, 151, 
	9, 8, 1, 10, 10, 10, 1, 1, 
	152, 9, 8, 1, 10, 10, 10, 1, 
	1, 153, 9, 8, 1, 10, 10, 10, 
	1, 1, 154, 9, 8, 1, 10, 10, 
	10, 1, 155, 9, 8, 156, 157, 1, 
	158, 1, 159, 1, 160, 160, 1, 161, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	5, 6, 7, 0, 162, 10, 10, 10, 
	162, 162, 164, 165, 166, 167, 163, 0, 
	162, 170, 170, 170, 162, 162, 171, 172, 
	173, 174, 169, 168, 162, 13, 13, 13, 
	162, 162, 171, 172, 173, 174, 175, 168, 
	162, 162, 162, 162, 162, 162, 171, 172, 
	173, 174, 168, 162, 24, 24, 24, 162, 
	162, 178, 179, 180, 181, 177, 176, 162, 
	27, 27, 27, 162, 162, 178, 179, 180, 
	181, 182, 176, 162, 10, 10, 10, 162, 
	162, 171, 172, 173, 174, 183, 168, 162, 
	107, 107, 107, 162, 162, 186, 187, 188, 
	189, 185, 184, 162, 110, 110, 110, 162, 
	162, 186, 187, 188, 189, 190, 184, 0
};

static const unsigned char _bbquery_parser_trans_targs[] = {
	2, 0, 90, 156, 91, 123, 136, 146, 
	2, 157, 158, 3, 159, 160, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 161, 
	160, 14, 162, 160, 16, 17, 18, 19, 
	20, 21, 23, 24, 25, 26, 27, 28, 
	29, 30, 31, 32, 33, 34, 160, 36, 
	37, 38, 39, 40, 41, 160, 42, 43, 
	44, 46, 47, 48, 49, 50, 51, 54, 
	52, 53, 160, 51, 56, 57, 58, 60, 
	61, 62, 63, 65, 66, 67, 68, 70, 
	71, 72, 73, 74, 75, 77, 78, 79, 
	81, 82, 83, 84, 86, 87, 88, 89, 
	157, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 164, 158, 101, 165, 158, 103, 
	104, 105, 106, 107, 108, 110, 111, 112, 
	114, 115, 116, 117, 119, 120, 121, 122, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 134, 135, 158, 137, 138, 139, 
	140, 141, 142, 158, 143, 144, 145, 147, 
	148, 149, 150, 151, 152, 155, 153, 154, 
	158, 152, 0, 157, 69, 76, 80, 85, 
	3, 163, 158, 4, 55, 59, 64, 159, 
	14, 162, 15, 22, 35, 45, 162, 163, 
	101, 165, 102, 109, 113, 118, 165
};

static const char _bbquery_parser_trans_actions[] = {
	1, 21, 1, 0, 1, 1, 1, 1, 
	0, 3, 3, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 11, 
	11, 0, 29, 29, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 0, 17, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 11, 11, 0, 35, 35, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 0, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 0, 17, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	15, 0, 0, 26, 1, 1, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 26, 
	1, 32, 1, 1, 1, 1, 38, 26, 
	1, 32, 1, 1, 1, 1, 42
};

static const char _bbquery_parser_eof_actions[] = {
	0, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};

static const int bbquery_parser_start = 1;
static const int bbquery_parser_first_final = 157;
static const int bbquery_parser_error = 0;

static const int bbquery_parser_en_main = 1;


#line 60 "query_parser.rl"

std::string* substr(const char* start, const char* end)
{
  char *buf = (char *)calloc((end - start + 1), sizeof(char));
  std::string *str;
  memcpy(buf, start, end - start);
  str = new std::string(buf);
  free(buf);
  return str;
}

QueryParser::QueryParser() {
}

QueryParser::~QueryParser() {
}

Query*
QueryParser::parse( const std::string& query_string ) {
  Query *query = new Query();

  const char* p = query_string.c_str();
  const char* pe = (const char*)(query_string.length() + query_string.length());
  const char* eof = pe;
  int cs;
  const char* begin = NULL;
  bool parse_result = true;

  std::cout << "***" << query_string << std::endl;

  
#line 547 "query_parser.cpp"
	{
	cs = bbquery_parser_start;
	}

#line 91 "query_parser.rl"
  
#line 554 "query_parser.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _bbquery_parser_trans_keys + _bbquery_parser_key_offsets[cs];
	_trans = _bbquery_parser_index_offsets[cs];

	_klen = _bbquery_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _bbquery_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _bbquery_parser_indicies[_trans];
	cs = _bbquery_parser_trans_targs[_trans];

	if ( _bbquery_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _bbquery_parser_actions + _bbquery_parser_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 6 "query_parser.rl"
	{ begin = p; }
	break;
	case 1:
#line 7 "query_parser.rl"
	{
    puts("parse query");
    query->words->push_back(substr(begin, p));
  }
	break;
	case 2:
#line 12 "query_parser.rl"
	{ begin = p; }
	break;
	case 3:
#line 13 "query_parser.rl"
	{
    puts("parse date");
    query->date = substr(begin, p);
  }
	break;
	case 4:
#line 18 "query_parser.rl"
	{ begin = p; }
	break;
	case 5:
#line 19 "query_parser.rl"
	{
    puts("parse channel");
    query->channel = substr(begin, p);
  }
	break;
	case 6:
#line 24 "query_parser.rl"
	{ begin = p; }
	break;
	case 7:
#line 25 "query_parser.rl"
	{
    puts("parse order by");
    query->order = substr(begin, p);
  }
	break;
	case 8:
#line 30 "query_parser.rl"
	{ begin = p; }
	break;
	case 9:
#line 31 "query_parser.rl"
	{
    puts("parse limit");
    query->limit = substr(begin, p);
  }
	break;
	case 10:
#line 36 "query_parser.rl"
	{ 
    puts("parse error");
    parse_result = false;
  }
	break;
#line 690 "query_parser.cpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _bbquery_parser_actions + _bbquery_parser_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 10:
#line 36 "query_parser.rl"
	{ 
    puts("parse error");
    parse_result = false;
  }
	break;
#line 713 "query_parser.cpp"
		}
	}
	}

	_out: {}
	}

#line 92 "query_parser.rl"

//   if (query->date)
//     std::cerr << *(query->date) << std::endl;
//   if (query->channel)
//     std::cerr << *(query->channel) << std::endl;
//   if (!query->words->empty())
//   {
//     std::vector<std::string*>::iterator it = query->words->begin();
//     while (it != query->words->end() )
//     {
//       std::cerr << *(*it) << std::endl;
//       ++it;
//     }
//   }

  if (parse_result)
  {
    return query;
  }
  else
  {
    return NULL;
  }
}
